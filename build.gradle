buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'com.github.maiflai:gradle-scalatest:0.9'
        classpath 'net.researchgate:gradle-release:2.3.4'
        classpath "org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:0.8.2"
    }
}

allprojects {
    group = 'com.landoop'
    version =  '0.1'
    description = "kafka-connect"
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'com.github.maiflai.scalatest'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'net.researchgate.release'
    apply plugin: 'scalaStyle'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        scalaMajorVersion = '2.11'
        scala = '2.11.8'
        scalaCheck = '1.11.1'
        scalaTest = '2.2.6'
        junit = '4.11'
        scalaLoggingVersion = '2.1.2'
        kafkaVersion = '0.10.0.0'
        mockitoVersion = '1.10.19'
        jacksonDatabind = '2.7.0'
        avroVersion = '1.8.0'
        jacksonxmlVersion = '2.6.5'
        slf4jVersion = "1.7.7"
        dataMountaineerCommonVersion = "0.3.7"
        dataMountaineerTestKitVersion = "0.2"
        avro4sVersion = "1.3.2"
        json4sVersion = "3.3.0"
        kiteMiniClusterVersion = "1.1.0"
        gsonVersion = "2.6.2"
        dataMountaineerCQLVersion = "0.5"
        confluentVersion = '3.0.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://packages.confluent.io/maven/" }
        maven { url "http://repo.typesafe.com/typesafe/releases/" }
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
        maven { url "http://conjars.org/repo" }
        maven { url "http://repo.spray.io" }
    }

    dependencies {
        compile "org.scala-lang:scala-library:$scala"
        compile "org.scala-lang:scala-compiler:$scala"
        compile "org.apache.kafka:connect-api:$kafkaVersion"
        compile "org.apache.kafka:connect-runtime:$kafkaVersion"
        compile "com.typesafe.scala-logging:scala-logging-slf4j_$scalaMajorVersion:$scalaLoggingVersion"
        compile ("com.datamountaineer:kcql:$dataMountaineerCQLVersion") {
            exclude group: "com.google.guava", module: "guava"
        }
//        "org.apache.kafka" % "connect-api" % kafkaVersion,
//        "org.apache.kafka" % "connect-runtime" % kafkaVersion,
        testCompile "org.mockito:mockito-all:$mockitoVersion"
        testCompile "org.scalacheck:scalacheck_$scalaMajorVersion:$scalaCheck"
        testCompile "org.scalatest:scalatest_$scalaMajorVersion:$scalaTest"
        testCompile "junit:junit:$junit"
        testRuntime 'org.pegdown:pegdown:1.1.0'
    }


    test {
        maxParallelForks = 1
        minHeapSize '256m'
        maxHeapSize '2048m'
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task scaladocJar(type: Jar) {
        classifier = 'scaladoc'
        from '../LICENSE'
        from scaladoc
    }

    tasks.withType(Tar) {
        compression Compression.GZIP
        extension = 'tgz'
    }

    shadowJar {
        transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
            resource = 'reference.conf'
        }
        version = "$project.version-$confluentVersion"
        zip64 true
    }

    jar {
        version =  "$project.version-$confluentVersion"
    }

    task compile(dependsOn: 'compileScala')
    task fatJar(dependsOn : ['test', 'shadowJar'])
    task fatJarNoTest(dependsOn : 'shadowJar')

    task collectJars(type: Copy){
        into "$buildDir/libs-dependencies"
        from configurations.runtime
    }

}